/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2012 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

// AI specific product patches applied to release 2011_2.
// This file is #included by hkaiPatches_2011_2.cpp

HK_PATCH_BEGIN("hkaiWorld", 25, "hkaiWorld", 26)
	HK_PATCH_MEMBER_REMOVED("bounds", TYPE_STRUCT, "hkAabb", 0)
	HK_PATCH_DEPENDS("hkAabb", 0)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiNavMesh", 10, "hkaiNavMesh", 11)
	HK_PATCH_MEMBER_ADDED_BYTE("flags", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiNavMeshGenerationSettingsWallClimbingSettings", 0)
	HK_PATCH_MEMBER_ADDED_BYTE("excludeWalkableFaces", 0)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiNavMeshGenerationSettings", 20, "hkaiNavMeshGenerationSettings", 21)
	HK_PATCH_MEMBER_ADDED("wallClimbingSettings", TYPE_STRUCT, "hkaiNavMeshGenerationSettingsWallClimbingSettings", 0)
	HK_PATCH_DEPENDS("hkaiNavMeshGenerationSettingsWallClimbingSettings", 0)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiPathPathPoint", 2, "hkaiPathPathPoint", 3)
	HK_PATCH_MEMBER_ADDED("normal", TYPE_VEC_4, HK_NULL, 0)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiNavMeshPathSearchParameters", 3, "hkaiNavMeshPathSearchParameters", 4)
	HK_PATCH_MEMBER_ADDED_BYTE("outputPathFlags", 3)
	HK_PATCH_FUNCTION(hkaiNavMeshPathSearchParameters_3_to_4)
	HK_PATCH_MEMBER_REMOVED("outputPathType", TYPE_BYTE, HK_NULL, 0)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiCharacter", 21, "hkaiCharacter", 22)
	HK_PATCH_MEMBER_REMOVED("movementState", TYPE_INT, HK_NULL, 0)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiNavMeshPathSearchParameters", 4, "hkaiNavMeshPathSearchParameters", 5)
	HK_PATCH_MEMBER_ADDED_REAL("maximumPathLength", HK_REAL_MAX)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiDynamicTree", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkReferencedObject")
	HK_PATCH_MEMBER_ADDED("treePtr", TYPE_OBJECT, "hkcdDynamicTreeDefaultTree48Storage", 0)
	HK_PATCH_DEPENDS("hkcdDynamicTreeDefaultTree48Storage", 0)
	HK_PATCH_DEPENDS("hkcdDynamicTreeDefaultDynamicStoragehkcdDynamicTreeCodecRawUint", 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkcdDynamicTreeDynamicStorage32", 0)
	HK_PATCH_DEPENDS("hkcdDynamicTreeDynamicStorage0hkcdDynamicTreeAnisotropicMetrichkcdDynamicTreeCodecRawUint", 0)
	HK_PATCH_DEPENDS("hkcdDynamicTreeAnisotropicMetric", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
	HK_PATCH_DEPENDS("hkcdDynamicTreeTreehkcdDynamicTreeDynamicStorage32", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiStaticTreeNavMeshQueryMediator", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkaiNavMeshQueryMediator")
	HK_PATCH_MEMBER_ADDED("tree", TYPE_OBJECT, "hkaiStaticTree", 0)
	HK_PATCH_MEMBER_ADDED("navMesh", TYPE_OBJECT, "hkaiNavMesh", 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkaiNavMesh", 11)
	HK_PATCH_DEPENDS("hkaiNavMeshQueryMediator", 0)
	HK_PATCH_DEPENDS("hkaiStaticTree", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiNavVolumeMediator", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkReferencedObject")
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiAabbTreeNavVolumeMediator", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkaiNavVolumeMediator")
	HK_PATCH_MEMBER_ADDED("navVolume", TYPE_OBJECT, "hkaiNavVolume", 0)
	HK_PATCH_MEMBER_ADDED("tree", TYPE_OBJECT, "hkaiStaticTree", 0)
	HK_PATCH_DEPENDS("hkaiNavVolume", 7)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkaiNavVolumeMediator", 0)
	HK_PATCH_DEPENDS("hkaiStaticTree", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiStreamingCollectionInstanceInfo", 1, "hkaiStreamingCollectionInstanceInfo", 2)
	HK_PATCH_MEMBER_ADDED("volumeMediator", TYPE_OBJECT, "hkaiNavVolumeMediator", 0)
	HK_PATCH_MEMBER_ADDED("treeNode", TYPE_INT, HK_NULL, 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkaiNavVolumeMediator", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiStreamingCollection", 1, "hkaiStreamingCollection", 2)
	HK_PATCH_MEMBER_ADDED_BYTE("isTemporary", 0)
	HK_PATCH_MEMBER_ADDED("tree", TYPE_OBJECT, "hkaiDynamicTree", 0)
	HK_PATCH_DEPENDS("hkaiDynamicTree", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiDynamicNavVolumeMediator", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkaiNavVolumeMediator")
	HK_PATCH_MEMBER_ADDED("collection", TYPE_OBJECT, "hkaiStreamingCollection", 0)
	HK_PATCH_MEMBER_ADDED("aabbTree", TYPE_OBJECT, "hkaiDynamicTree", 0)
	HK_PATCH_DEPENDS("hkaiDynamicTree", 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkaiNavVolumeMediator", 0)
	HK_PATCH_DEPENDS("hkaiStreamingCollection", 2)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiDynamicNavMeshQueryMediator", 3, "hkaiDynamicNavMeshQueryMediator", 4)
	HK_PATCH_MEMBER_ADDED("collection", TYPE_OBJECT, "hkaiStreamingCollection", 0)
	HK_PATCH_MEMBER_ADDED("aabbTree", TYPE_OBJECT, "hkaiDynamicTree", 0)
	HK_PATCH_DEPENDS("hkaiDynamicTree", 0)
	HK_PATCH_DEPENDS("hkaiStreamingCollection", 2)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiWorld", 26, "hkaiWorld", 27)
	HK_PATCH_MEMBER_ADDED("dynamicNavVolumeMediator", TYPE_OBJECT, "hkaiDynamicNavVolumeMediator", 0)
	HK_PATCH_DEPENDS("hkaiNavVolumeMediator", 0)
	HK_PATCH_DEPENDS("hkaiDynamicNavVolumeMediator", 0)
	HK_PATCH_MEMBER_REMOVED("streamingCollection", TYPE_STRUCT, "hkaiStreamingCollection", 0)
	HK_PATCH_MEMBER_ADDED("streamingCollection", TYPE_OBJECT, "hkaiStreamingCollection", 0)
	HK_PATCH_DEPENDS("hkaiStreamingCollection", 2)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiNavMeshCutter", 10, "hkaiNavMeshCutter", 11)
	HK_PATCH_MEMBER_ADDED("connectivityInfo", TYPE_STRUCT, "hkaiNavMeshCutterSavedConnectivity", 0)
	HK_PATCH_MEMBER_ADDED("streamingCollection", TYPE_OBJECT, "hkaiStreamingCollection", 0)
	HK_PATCH_MEMBER_ADDED("forceRecutFaceKeys", TYPE_ARRAY_INT, HK_NULL, 0)
	HK_PATCH_DEPENDS("hkaiStreamingCollection", 2)
	HK_PATCH_DEPENDS("hkaiNavMeshCutterSavedConnectivity", 0)
HK_PATCH_END()


HK_PATCH_BEGIN("hkaiDirectedGraphExplicitCost", 4, "hkaiDirectedGraphExplicitCost", 5)
	HK_PATCH_MEMBER_ADDED_INT("runtimeId", 0)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiNavVolume", 7, "hkaiNavVolume", 8)
	HK_PATCH_MEMBER_ADDED_INT("runtimeId", 0)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiNavMesh", 11, "hkaiNavMesh", 12)
	HK_PATCH_MEMBER_ADDED_INT("runtimeId", 0)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiStreamingManagerSectionInfo", 5, "hkaiStreamingManagerSectionInfo", 6)
	HK_PATCH_MEMBER_ADDED("referenceCount", TYPE_INT, HK_NULL, 0)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiNavMeshCutterSavedConnectivity", 0, "hkaiNavMeshCutterSavedConnectivity", 1)
	HK_PATCH_MEMBER_ADDED("storage", TYPE_STRUCT, "hkSetUint32", 0)
	HK_PATCH_DEPENDS("hkSetunsignedinthkContainerHeapAllocatorhkMapOperationsunsignedint", 0)
	HK_PATCH_DEPENDS("hkSetUint32", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiSilhouetteGenerator", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkReferencedObject")
	HK_PATCH_MEMBER_ADDED_INT("userData", 0)
	HK_PATCH_MEMBER_ADDED_REAL("lazyRecomputeDisplacementThreshold", 0.100000f)
	HK_PATCH_MEMBER_ADDED("type", TYPE_BYTE, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED("forceGenerateOntoPpu", TYPE_BYTE, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED("transform", TYPE_STRUCT, "hkQTransform", 0)
	HK_PATCH_MEMBER_ADDED("cachedSilhouettesTransform", TYPE_STRUCT, "hkQTransform", 0)
	HK_PATCH_MEMBER_ADDED("cachedSilhouettes", TYPE_STRUCT, "hkaiConvexSilhouetteSet", 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkaiConvexSilhouetteSet", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
	HK_PATCH_DEPENDS("hkQTransform", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiConvexSilhouetteSet", 0)
	HK_PATCH_MEMBER_ADDED("vertexPool", TYPE_ARRAY_VEC_4, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED("silhouetteOffsets", TYPE_ARRAY_INT, HK_NULL, 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiPointCloudSilhouetteGenerator", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkaiSilhouetteGenerator")
	HK_PATCH_MEMBER_ADDED("localAabb", TYPE_STRUCT, "hkAabb", 0)
	HK_PATCH_MEMBER_ADDED("localPoints", TYPE_ARRAY_VEC_4, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED_REAL("weldTolerance", 0.010000f)
	HK_PATCH_MEMBER_ADDED_BYTE("flags", 1)
	HK_PATCH_MEMBER_ADDED_BYTE("localPointsChanged", 1)
	HK_PATCH_MEMBER_ADDED_BYTE("isEnabled", 1)
	HK_PATCH_DEPENDS("hkaiSilhouetteGenerator", 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkAabb", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
HK_PATCH_END()

#if defined(HK_FEATURE_PRODUCT_AI) && defined(HK_FEATURE_PRODUCT_PHYSICS)
HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiRigidBodySilhouetteGenerator", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkaiSilhouetteGenerator")
	HK_PATCH_MEMBER_ADDED_BYTE("detailLevel", 1)
	HK_PATCH_MEMBER_ADDED("rigidBody", TYPE_OBJECT, "hkpRigidBody", 0)
	HK_PATCH_MEMBER_ADDED_VEC_4("linearVelocityAndThreshold", 0.000000f,0.000000f,0.000000f,3.000000f)
	HK_PATCH_DEPENDS("hkaiSilhouetteGenerator", 0)
	HK_PATCH_DEPENDS("hkpRigidBody", 0)
	HK_PATCH_DEPENDS("hkpEntity", 3)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkpWorldObject", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
HK_PATCH_END()
#endif

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiSilhouetteGenerationParameters", 0)
	HK_PATCH_MEMBER_ADDED("extraExpansion", TYPE_REAL, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED("bevelThreshold", TYPE_REAL, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED("maxSilhouetteSize", TYPE_REAL, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED("simplify2dConvexHullThreshold", TYPE_REAL, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED("referenceFrame", TYPE_STRUCT, "hkaiSilhouetteReferenceFrame", 0)
	HK_PATCH_DEPENDS("hkaiSilhouetteReferenceFrame", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiSilhouetteReferenceFrame", 0)
	HK_PATCH_MEMBER_ADDED("up", TYPE_VEC_4, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED("referenceAxis", TYPE_VEC_4, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED("orthogonalAxis", TYPE_VEC_4, HK_NULL, 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiConvexHullSilhouetteMerger", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkaiSilhouetteMerger")
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
	HK_PATCH_DEPENDS("hkaiSilhouetteMerger", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiSimpleSilhouetteMerger", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkaiSilhouetteMerger")
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
	HK_PATCH_DEPENDS("hkaiSilhouetteMerger", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiSilhouetteMerger", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkReferencedObject")
	HK_PATCH_MEMBER_ADDED("mergeType", TYPE_BYTE, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED("mergeParams", TYPE_STRUCT, "hkaiSilhouetteGenerationParameters", 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkaiSilhouetteGenerationParameters", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiOverlapManagerSectionGeneratorData", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkReferencedObject")
	HK_PATCH_MEMBER_ADDED("context", TYPE_STRUCT, "hkaiSilhouetteGeneratorSectionContext", 0)
	HK_PATCH_MEMBER_ADDED("overlappedFaces", TYPE_ARRAY_INT, HK_NULL, 0)
	HK_PATCH_DEPENDS("hkaiSilhouetteGeneratorSectionContext", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiReferenceFrameAndExtrusion", 0)
	HK_PATCH_MEMBER_ADDED("up", TYPE_VEC_4, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED("cellExtrusion", TYPE_REAL, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED("silhouetteRadiusExpasion", TYPE_REAL, HK_NULL, 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiOverlapManager", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkReferencedObject")
	HK_PATCH_MEMBER_ADDED("faceExtrusion", TYPE_VEC_4, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED("referenceFrameAndExtrusion", TYPE_STRUCT, "hkaiReferenceFrameAndExtrusion", 0)
	HK_PATCH_MEMBER_ADDED("navMeshCollection", TYPE_OBJECT, "hkaiStreamingCollection", 0)
	HK_PATCH_MEMBER_ADDED("sections", TYPE_ARRAY_STRUCT, "hkaiOverlapManagerSection", 0)
	HK_PATCH_MEMBER_ADDED("stepCount", TYPE_INT, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED_REAL("hasMovedTolerance", 0.001000f)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkaiOverlapManagerSection", 0)
	HK_PATCH_DEPENDS("hkaiStreamingCollection", 2)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
	HK_PATCH_DEPENDS("hkaiReferenceFrameAndExtrusion", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiOverlapManagerSection", 0)
	HK_PATCH_MEMBER_ADDED("generatorData", TYPE_ARRAY_OBJECT, "hkaiOverlapManagerSectionGeneratorData", 0)
	HK_PATCH_MEMBER_ADDED("faceIsDirty", TYPE_STRUCT, "hkBitField", 0)
	HK_PATCH_DEPENDS("hkaiOverlapManagerSectionGeneratorData", 0)
	HK_PATCH_DEPENDS("hkBitField", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiSilhouetteGeneratorSectionContext", 0)
	HK_PATCH_MEMBER_ADDED("lastRelativeTransform", TYPE_STRUCT, "hkQTransform", 0)
	HK_PATCH_MEMBER_ADDED("generator", TYPE_OBJECT, "hkaiSilhouetteGenerator", 0)
	HK_PATCH_MEMBER_ADDED("generatedLastFrame", TYPE_BYTE, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED("generatingThisFrame", TYPE_BYTE, HK_NULL, 0)
	HK_PATCH_DEPENDS("hkaiSilhouetteGenerator", 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
	HK_PATCH_DEPENDS("hkQTransform", 0)
HK_PATCH_END()


HK_PATCH_BEGIN("hkaiWorld", 27, "hkaiWorld", 28)
	HK_PATCH_MEMBER_ADDED("silhouetteGenerators", TYPE_ARRAY_OBJECT, "hkaiSilhouetteGenerator", 0)
	HK_PATCH_MEMBER_ADDED("silhouetteMerger", TYPE_OBJECT, "hkaiSilhouetteMerger", 0)
	HK_PATCH_MEMBER_ADDED("overlapManager", TYPE_OBJECT, "hkaiOverlapManager", 0)
	HK_PATCH_MEMBER_ADDED("streamingManager", TYPE_OBJECT, "hkaiStreamingManager", 0)
	HK_PATCH_DEPENDS("hkaiSilhouetteGenerator", 0)
	HK_PATCH_DEPENDS("hkaiSilhouetteMerger", 0)
	HK_PATCH_DEPENDS("hkaiOverlapManager", 0)
	HK_PATCH_DEPENDS("hkaiStreamingManager", 6)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiSilhouetteRecorderReplayEvent", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkReferencedObject")
	HK_PATCH_MEMBER_ADDED("eventType", TYPE_BYTE, HK_NULL, 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiSilhouetteRecorderInstanceUnloadedEvent", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkaiSilhouetteRecorderReplayEvent")
	HK_PATCH_MEMBER_ADDED("sectionUid", TYPE_INT, HK_NULL, 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkaiSilhouetteRecorderReplayEvent", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiSilhouetteRecorderWorldConnectedEvent", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkaiSilhouetteRecorderReplayEvent")
	HK_PATCH_MEMBER_ADDED("world", TYPE_OBJECT, "hkaiWorld", 0)
	HK_PATCH_MEMBER_ADDED("streamingManager", TYPE_OBJECT, "hkaiStreamingManager", 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkaiSilhouetteRecorderReplayEvent", 0)
	HK_PATCH_DEPENDS("hkaiWorld", 28)
	HK_PATCH_DEPENDS("hkaiStreamingManager", 6)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiSilhouetteRecorderInstanceLoadedEvent", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkaiSilhouetteRecorderReplayEvent")
	HK_PATCH_MEMBER_ADDED("instance", TYPE_OBJECT, "hkaiNavMeshInstance", 0)
	HK_PATCH_MEMBER_ADDED("mediator", TYPE_OBJECT, "hkaiNavMeshQueryMediator", 0)
	HK_PATCH_MEMBER_ADDED("graph", TYPE_OBJECT, "hkaiDirectedGraphExplicitCost", 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkaiSilhouetteRecorderReplayEvent", 0)
	HK_PATCH_DEPENDS("hkaiNavMeshQueryMediator", 0)
	HK_PATCH_DEPENDS("hkaiNavMeshInstance", 2)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
	HK_PATCH_DEPENDS("hkaiDirectedGraphExplicitCost", 5)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiSilhouetteRecorderSilhouettesSteppedEvent", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkaiSilhouetteRecorderReplayEvent")
	HK_PATCH_MEMBER_ADDED("generators", TYPE_ARRAY_OBJECT, "hkaiSilhouetteGenerator", 0)
	HK_PATCH_MEMBER_ADDED("overlapManagerSections", TYPE_ARRAY_STRUCT, "hkaiOverlapManagerSection", 0)
	HK_PATCH_DEPENDS("hkaiSilhouetteGenerator", 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkaiOverlapManagerSection", 0)
	HK_PATCH_DEPENDS("hkaiSilhouetteRecorderReplayEvent", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiSilhouetteRecorderSilhouettesSteppedEvent", 0, "hkaiSilhouetteRecorderSilhouettesSteppedEvent", 1)
	HK_PATCH_MEMBER_ADDED_INT("stepThreading", 0)
	HK_PATCH_MEMBER_ADDED("instanceTransforms", TYPE_ARRAY_VEC_16, HK_NULL, 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiSilhouetteRecorderGraphUnloadedEvent", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkaiSilhouetteRecorderReplayEvent")
	HK_PATCH_MEMBER_ADDED("sectionUid", TYPE_INT, HK_NULL, 0)
	HK_PATCH_DEPENDS("hkaiSilhouetteRecorderReplayEvent", 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiSilhouetteRecorderVolumeLoadedEvent", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkaiSilhouetteRecorderReplayEvent")
	HK_PATCH_MEMBER_ADDED("volume", TYPE_OBJECT, "hkaiNavVolume", 0)
	HK_PATCH_MEMBER_ADDED("mediator", TYPE_OBJECT, "hkaiNavVolumeMediator", 0)
	HK_PATCH_DEPENDS("hkaiSilhouetteRecorderReplayEvent", 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkaiNavVolume", 8)
	HK_PATCH_DEPENDS("hkaiNavVolumeMediator", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiSilhouetteRecorderGraphLoadedEvent", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkaiSilhouetteRecorderReplayEvent")
	HK_PATCH_MEMBER_ADDED("graph", TYPE_OBJECT, "hkaiDirectedGraphExplicitCost", 0)
	HK_PATCH_DEPENDS("hkaiSilhouetteRecorderReplayEvent", 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
	HK_PATCH_DEPENDS("hkaiDirectedGraphExplicitCost", 5)
HK_PATCH_END()

HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiSilhouetteRecorderVolumeUnloadedEvent", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkaiSilhouetteRecorderReplayEvent")
	HK_PATCH_MEMBER_ADDED("sectionUid", TYPE_INT, HK_NULL, 0)
	HK_PATCH_DEPENDS("hkaiSilhouetteRecorderReplayEvent", 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiAvoidanceSolverMovementProperties", 2, "hkaiAvoidanceSolverMovementProperties", 3)
	HK_PATCH_MEMBER_ADDED_BYTE("useAngularConstraints", 1)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiNavMeshGenerationSettingsEdgeMatchingParameters", 3, "hkaiNavMeshGenerationSettingsEdgeMatchingParameters", 4)
	HK_PATCH_MEMBER_ADDED_REAL("behindFaceTolerance", 0.000100f)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiNavMeshGenerationSettingsEdgeMatchingParameters", 4, "hkaiNavMeshGenerationSettingsEdgeMatchingParameters", 5)
	HK_PATCH_MEMBER_ADDED_REAL("minAngleBetweenFaces", 1.535890f)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiNavMeshGenerationSettingsEdgeMatchingParameters", 5, "hkaiNavMeshGenerationSettingsEdgeMatchingParameters", 6)
	HK_PATCH_MEMBER_DEFAULT_SET_REAL("minAngleBetweenFaces", 1.518436f)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiNavVolumeGenerationSettings", 6, "hkaiNavVolumeGenerationSettings", 7)
	HK_PATCH_MEMBER_ADDED_BYTE("resolutionRoundingMode", 1)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiNavVolumeGenerationSettingsMaterialConstructionInfo", 1, "hkaiNavVolumeGenerationSettingsMaterialConstructionInfo", 2)
	HK_PATCH_MEMBER_DEFAULT_SET_INT("materialIndex", -1)
	HK_PATCH_MEMBER_DEFAULT_SET_INT("flags", 1)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiNavVolumeGenerationSettings", 7, "hkaiNavVolumeGenerationSettings", 8)
	HK_PATCH_MEMBER_ADDED("defaultConstructionInfo", TYPE_STRUCT, "hkaiNavVolumeGenerationSettingsMaterialConstructionInfo", 0)
	HK_PATCH_FUNCTION(hkaiNavVolumeGenerationSettings_7_to_8)
	HK_PATCH_MEMBER_REMOVED("defaultConstructionProperties", TYPE_INT, HK_NULL, 0)
	HK_PATCH_DEPENDS("hkaiNavVolumeGenerationSettingsMaterialConstructionInfo", 2)
HK_PATCH_END()

#if defined(HK_FEATURE_PRODUCT_AI) && defined(HK_FEATURE_PRODUCT_PHYSICS)
HK_PATCH_BEGIN(HK_NULL, HK_CLASS_ADDED, "hkaiMoppNavMeshQueryMediator", 0)
	HK_PATCH_PARENT_SET(HK_NULL, "hkaiNavMeshQueryMediator")
	HK_PATCH_MEMBER_ADDED("code", TYPE_OBJECT, "hkpMoppCode", 0)
	HK_PATCH_MEMBER_ADDED("codeInfoCopy", TYPE_VEC_4, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED("navMesh", TYPE_OBJECT, "hkaiNavMesh", 0)
	HK_PATCH_DEPENDS("hkBaseObject", 0)
	HK_PATCH_DEPENDS("hkaiNavMesh", 12)
	HK_PATCH_DEPENDS("hkaiNavMeshQueryMediator", 0)
	HK_PATCH_DEPENDS("hkReferencedObject", 0)
	HK_PATCH_DEPENDS("hkpMoppCode", 0)
HK_PATCH_END()
#endif

HK_PATCH_BEGIN("hkaiCharacter", 22, "hkaiCharacter", 23)
	HK_PATCH_MEMBER_ADDED_POINTER("costModifier", "hkaiNavMeshCostModifier", 0)
	HK_PATCH_MEMBER_ADDED_POINTER("volumeCostModifier", "hkaiNavVolumeCostModifier", 0)
	HK_PATCH_MEMBER_ADDED_BYTE("useNewAvoidance", 0)
	HK_PATCH_MEMBER_ADDED_VEC_4("up", 0.000000f,0.000000f,1.000000f,0.000000f)
	HK_PATCH_DEPENDS("hkaiNavVolumeCostModifier", 1)
	HK_PATCH_DEPENDS("hkaiNavMeshCostModifier", 2)
	//HK_PATCH_FUNCTION(hkaiCharacter_22_to_23)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiLocalSteeringInput", 2, "hkaiLocalSteeringInput", 3)
	HK_PATCH_MEMBER_ADDED("currentUp", TYPE_VEC_4, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED("nextCorner", TYPE_VEC_4, HK_NULL, 0)
	HK_PATCH_MEMBER_ADDED("useNewAvoidance", TYPE_BYTE, HK_NULL, 0)
HK_PATCH_END()

HK_PATCH_BEGIN("hkaiNavMeshPathSearchParameters", 5, "hkaiNavMeshPathSearchParameters", 6)
	HK_PATCH_MEMBER_ADDED_BYTE("lineOfSightFlags", 1)
	HK_PATCH_FUNCTION(hkaiNavMeshPathSearchParameters_5_to_6)
	HK_PATCH_MEMBER_REMOVED("checkForLineOfSight", TYPE_BYTE, HK_NULL, 0)
HK_PATCH_END()

/*
 * Havok SDK - NO SOURCE PC DOWNLOAD, BUILD(#20120831)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2012
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available at www.havok.com/tryhavok.
 * 
 */
