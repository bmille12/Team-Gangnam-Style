/*
 *
 * Confidential Information of Telekinesys Research Limited (t/a Havok). Not for disclosure or distribution without Havok's
 * prior written consent. This software contains code, techniques and know-how which is confidential and proprietary to Havok.
 * Product and Trade Secret source code contains trade secrets of Havok. Havok Software (C) Copyright 1999-2012 Telekinesys Research Limited t/a Havok. All Rights Reserved. Use of this software is subject to the terms of an end user license agreement.
 *
 */

//HK_REFLECTION_PARSER_EXCLUDE_FILE

// Autogenerated by generateReflections.py (reflectedClasses.py)
// Changes will not be lost unless:
// - The workspace is re-generated using build.py
// - The corresponding reflection database (reflection.db) is deleted
// - The --force-output or --force-rebuild option is added to the pre-build generateReflection.py execution

// Generated from 'ContentTools/Common/Filters/FilterTutorial/ConvertToPhantomAction/MyPhantomShape.h'
#include <ContentTools/Common/Filters/FilterTutorial/hctFilterTutorial.h>
#include <Common/Base/Reflection/hkClass.h>
#include <Common/Base/Reflection/hkInternalClassMember.h>
#include <Common/Base/Reflection/hkTypeInfo.h>
#include <Common/Base/Reflection/Attributes/hkAttributes.h>
#include <ContentTools/Common/Filters/FilterTutorial/ConvertToPhantomAction/MyPhantomShape.h>
#define True true
#define False false


// External pointer and enum types
extern const hkClassEnum* MyPhantomShapeActionTypeEnum;

//
// Enum MyPhantomShape::ActionType
//
static const hkInternalClassEnumItem MyPhantomShapeActionTypeEnumItems[] =
{
	{0, "ACTION_WIND"},
	{1, "ACTION_ATTRACT"},
	{2, "ACTION_DEFLECT"},
};
static const hkInternalClassEnum MyPhantomShapeEnums[] = {
	{"ActionType", MyPhantomShapeActionTypeEnumItems, 3, HK_NULL, 0 }
};
const hkClassEnum* MyPhantomShapeActionTypeEnum = reinterpret_cast<const hkClassEnum*>(&MyPhantomShapeEnums[0]);

//
// Class MyPhantomShape
//
extern const hkClass hkpPhantomCallbackShapeClass;

static const hkInternalClassMember MyPhantomShapeClass_Members[] =
{
	{ "actionType", HK_NULL, MyPhantomShapeActionTypeEnum, hkClassMember::TYPE_ENUM, hkClassMember::TYPE_INT8, 0, 0, HK_OFFSET_OF(MyPhantomShape,m_actionType), HK_NULL },
	{ "direction", HK_NULL, HK_NULL, hkClassMember::TYPE_VECTOR4, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(MyPhantomShape,m_direction), HK_NULL },
	{ "strength", HK_NULL, HK_NULL, hkClassMember::TYPE_REAL, hkClassMember::TYPE_VOID, 0, 0, HK_OFFSET_OF(MyPhantomShape,m_strength), HK_NULL }
};
extern const hkClass MyPhantomShapeClass;
const hkClass MyPhantomShapeClass(
	"MyPhantomShape",
	&hkpPhantomCallbackShapeClass, // parent
	sizeof(::MyPhantomShape),
	HK_NULL,
	0, // interfaces
	reinterpret_cast<const hkClassEnum*>(MyPhantomShapeEnums),
	1, // enums
	reinterpret_cast<const hkClassMember*>(MyPhantomShapeClass_Members),
	HK_COUNT_OF(MyPhantomShapeClass_Members),
	HK_NULL, // defaults
	HK_NULL, // attributes
	0, // flags
	hkUint32(0) // version
	);
#ifndef HK_HKCLASS_DEFINITION_ONLY
const hkClass& HK_CALL MyPhantomShape::staticClass()
{
	return MyPhantomShapeClass;
}
HK_COMPILE_TIME_ASSERT2( \
	sizeof(hkIsVirtual(static_cast<MyPhantomShape*>(0))) == sizeof(hkBool::CompileTimeTrueType), \
	REFLECTION_PARSER_VTABLE_DETECTION_FAILED );
static void HK_CALL finishLoadedObjectMyPhantomShape(void* p, int finishing = 1)
{
	hkFinishLoadedObjectFlag f;
	f.m_finishing = finishing;
	new (p) MyPhantomShape(f);
}
static void HK_CALL cleanupLoadedObjectMyPhantomShape(void* p)
{
	static_cast<MyPhantomShape*>(p)->~MyPhantomShape();
}
static const void* HK_CALL getVtableMyPhantomShape()
{
	#if defined(HK_COMPILER_GHS)
	return ((const void*)(typeid(MyPhantomShape).name()));
	#else
	union { HK_ALIGN16(void* ptr); char buf[sizeof(MyPhantomShape)]; } u;
	hkFinishLoadedObjectFlag f;
	new (u.buf) MyPhantomShape(f);
	return u.ptr;
	#endif
}
extern const hkTypeInfo MyPhantomShapeTypeInfo;
const hkTypeInfo MyPhantomShapeTypeInfo(
	"MyPhantomShape",
	"!MyPhantomShape",
	finishLoadedObjectMyPhantomShape,
	cleanupLoadedObjectMyPhantomShape,
	getVtableMyPhantomShape(),
	sizeof(MyPhantomShape)
	);
#endif

/*
 * Havok SDK - NO SOURCE PC DOWNLOAD, BUILD(#20120831)
 * 
 * Confidential Information of Havok.  (C) Copyright 1999-2012
 * Telekinesys Research Limited t/a Havok. All Rights Reserved. The Havok
 * Logo, and the Havok buzzsaw logo are trademarks of Havok.  Title, ownership
 * rights, and intellectual property rights in the Havok software remain in
 * Havok and/or its suppliers.
 * 
 * Use of this software for evaluation purposes is subject to and indicates
 * acceptance of the End User licence Agreement for this product. A copy of
 * the license is included with this software and is also available at www.havok.com/tryhavok.
 * 
 */
